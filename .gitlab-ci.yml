# .gitlab-ci.yml
# Pipeline CI/CD para detector de enfermedades en cultivos

variables:
  UV_VERSION: "0.5"
  PYTHON_VERSION: "3.10"
  BASE_LAYER: bookworm-slim
  UV_LINK_MODE: copy

  # Para build de imagen (ajusta si quieres)
  IMAGE_NAME: "$CI_REGISTRY_IMAGE"
  IMAGE_TAG: "${CI_COMMIT_TAG:-$CI_COMMIT_REF_SLUG}"
  REGISTRY: "$CI_REGISTRY"
  REGISTRY_USER: "$CI_REGISTRY_USER"
  REGISTRY_PASSWORD: "$CI_REGISTRY_PASSWORD"

stages:
  - test
  - build
  - deploy

run_test:
  stage: test
  image: "ghcr.io/astral-sh/uv:${UV_VERSION}-python${PYTHON_VERSION}-${BASE_LAYER}"
  before_script:
    - apt-get update && apt-get install -y make libgl1-mesa-glx libglib2.0-0
  script:
    - make test
  cache:
    key:
      files:
        - requirements.txt
    paths:
      - venv/

build_image:
  stage: build
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image: docker:24.0.5-cli
  services:
    - docker:24.0.5-dind
  before_script:
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin "$REGISTRY"
  script:
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"

deploy_to_digitalocean:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    - |
      ssh $DEPLOY_USER@$DEPLOY_SERVER << 'EOF'
        cd /opt/enfermedades-plantas || mkdir -p /opt/enfermedades-plantas && cd /opt/enfermedades-plantas
        
        # Clonar o actualizar repositorio
        if [ -d ".git" ]; then
          git pull origin main
        else
          git clone https://gitlab.com/mash4403/detector_enfermedades_cultivo.git .
        fi
        
        # Detener contenedores anteriores
        docker compose down || true
        
        # Iniciar aplicaciÃ³n
        docker compose up -d plant-disease-app
        
        # Verificar estado
        docker compose ps
      EOF
  only:
    - main
  when: manual
  environment:
    name: production
    url: http://$DEPLOY_SERVER:8501
